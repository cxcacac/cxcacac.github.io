I"cI<h1 id="刷题记录-06-17">刷题记录-06-17</h1>

<h3 id="并查集accounts-merge">并查集：<a href="https://leetcode-cn.com/problems/accounts-merge/">Accounts Merge</a></h3>

<p>思路：并查集的作用之一，建立不同元素之间的联系，即建立连通分支，这里是建立不同邮箱账号之间的联系。</p>

<p>用的工具比较多，也说明设计的一个点，可以做功能模块，但是不先做功能。</p>

<h3 id="并查集smallest-string-with-swaps">并查集：<a href="https://leetcode-cn.com/problems/smallest-string-with-swaps/">Smallest String With Swaps</a></h3>

<p>思路：如果相邻字母能转无数次，其实相当于做一个排序，这也是排序的基本流程。所以可以建立连通分支后排序。</p>

<p>这里采用<a href="https://leetcode-cn.com/u/fa-kuang-de-jie-zi/">发狂的桔子</a>的思路，里面确定连通分支的内容可以作为一个固定的方法，使用map和defaultdict(list)，但要注意，不能直接采用下面的代码模块，因为不能确保每个数值都指向根节点，find函数可以改parent节点的位置，但是并不能完全让元素指向根节点。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">for</span> <span class="n">key</span><span class="p">,</span><span class="n">val</span> <span class="ow">in</span> <span class="n">d</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
            <span class="n">link</span><span class="p">[</span><span class="n">val</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</code></pre></div></div>

<p>最终代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">smallestStringWithSwaps</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">pairs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="c1"># 如果能转无数次，说明能任意换位置，建立连通分支
</span>        <span class="c1"># 对每个连通分支排序，之后填入即可。
</span>        <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))}</span>
        <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
            <span class="k">while</span> <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">x</span><span class="p">:</span>
                <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]]</span>
                <span class="n">x</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">x</span>

        <span class="k">for</span> <span class="n">pair</span> <span class="ow">in</span> <span class="n">pairs</span><span class="p">:</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">pair</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="n">y</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">pair</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">:</span>
                <span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">y</span>
        
        <span class="n">link</span> <span class="o">=</span> <span class="n">collections</span><span class="p">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="c1"># 确定连通分支内元素所在的坐标，利用根节点的key值和list存储
</span>        <span class="k">for</span> <span class="n">key</span><span class="p">,</span><span class="n">val</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">find</span><span class="p">,</span> <span class="n">d</span><span class="p">.</span><span class="n">keys</span><span class="p">())):</span>
            <span class="n">link</span><span class="p">[</span><span class="n">val</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

        <span class="n">arr</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="c1"># 给出连通分支的内容
</span>        <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">link</span><span class="p">.</span><span class="n">values</span><span class="p">():</span>
            <span class="n">t</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">l</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">idx</span><span class="p">,</span><span class="n">val</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">l</span><span class="p">),</span><span class="n">t</span><span class="p">):</span>
                <span class="n">arr</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>
        <span class="k">return</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>  
</code></pre></div></div>

<h3 id="分治算法different-ways-to-add-parentheses">分治算法：<a href="https://leetcode-cn.com/problems/different-ways-to-add-parentheses/">Different Ways to Add Parentheses</a></h3>

<p>思路：分治即是分为两个部分调用函数，不一定是二分的位置，从$0…..（n-1）$都有可能，快速排序用的就是这个思路。在这个问题中，对两个部分的划分是根据运算符的位置确定的，然后对分好的部分调用递归函数即可，要注意两点：（1）递归终止条件（2）递归返回值的类型。</p>

<p>下面的思路来自于：<a href="https://leetcode-cn.com/u/jalan/">江不知</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">diffWaysToCompute</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">input</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="c1"># 分治法的分而治之并不是二分，而是寻找到子结构。
</span>        <span class="k">if</span> <span class="nb">input</span><span class="p">.</span><span class="n">isdigit</span><span class="p">():</span>
            <span class="k">return</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">)]</span>
        
        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nb">input</span><span class="p">)):</span>
            <span class="k">if</span> <span class="nb">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'*'</span><span class="p">,</span> <span class="s">'+'</span><span class="p">,</span> <span class="s">'-'</span><span class="p">]:</span>
                <span class="n">left</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">diffWaysToCompute</span><span class="p">(</span><span class="nb">input</span><span class="p">[:</span><span class="n">i</span><span class="p">])</span>
                <span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">diffWaysToCompute</span><span class="p">(</span><span class="nb">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span> 
                <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">left</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">right</span><span class="p">:</span>
                        <span class="k">if</span> <span class="nb">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">'+'</span><span class="p">:</span>
                            <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">m</span><span class="o">+</span><span class="n">n</span><span class="p">)</span>
                        <span class="k">if</span> <span class="nb">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">'*'</span><span class="p">:</span>
                            <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">m</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
                        <span class="k">if</span> <span class="nb">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">'-'</span><span class="p">:</span>
                            <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="n">n</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">res</span> 
</code></pre></div></div>

<p>加了备忘录后：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">diffWaysToCompute</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">input</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="c1"># 分治法的分而治之并不是二分，而是寻找到子结构。
</span>        <span class="c1"># defaultdict最大的作用是默认值。
</span>        <span class="n">m</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">if</span> <span class="nb">input</span><span class="p">.</span><span class="n">isdigit</span><span class="p">():</span>
            <span class="n">m</span><span class="p">[</span><span class="nb">input</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">)]</span>
            <span class="k">return</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">)]</span>

        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nb">input</span><span class="p">)):</span>
            <span class="k">if</span> <span class="nb">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'*'</span><span class="p">,</span> <span class="s">'+'</span><span class="p">,</span> <span class="s">'-'</span><span class="p">]:</span>
                <span class="n">lstr</span> <span class="o">=</span> <span class="nb">input</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>
                <span class="n">rstr</span> <span class="o">=</span> <span class="nb">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
                <span class="k">if</span> <span class="n">lstr</span> <span class="ow">in</span> <span class="n">m</span><span class="p">:</span>
                    <span class="n">left</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="n">lstr</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">left</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">diffWaysToCompute</span><span class="p">(</span><span class="n">lstr</span><span class="p">)</span>
                    <span class="n">m</span><span class="p">[</span><span class="n">lstr</span><span class="p">]</span> <span class="o">=</span> <span class="n">left</span>
                <span class="k">if</span> <span class="n">rstr</span> <span class="ow">in</span> <span class="n">m</span><span class="p">:</span>
                    <span class="n">right</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="n">rstr</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">diffWaysToCompute</span><span class="p">(</span><span class="n">rstr</span><span class="p">)</span>
                    <span class="n">m</span><span class="p">[</span><span class="n">rstr</span><span class="p">]</span> <span class="o">=</span> <span class="n">right</span>
           
                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">left</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">right</span><span class="p">:</span>
                        <span class="k">if</span> <span class="nb">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">'+'</span><span class="p">:</span>
                            <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="n">k</span><span class="p">)</span>
                        <span class="k">if</span> <span class="nb">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">'*'</span><span class="p">:</span>
                            <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="o">*</span><span class="n">k</span><span class="p">)</span>
                        <span class="k">if</span> <span class="nb">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">'-'</span><span class="p">:</span>
                            <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">k</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">res</span> 
</code></pre></div></div>

<p>还有<a href="https://leetcode-cn.com/problems/different-ways-to-add-parentheses/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-5-5/">windliang的解答</a>，思路很流畅，从递归到memoization，再到动态规划。</p>

<p>动态规划：</p>

<h3 id="二分法find-peak-element">二分法：<a href="https://leetcode-cn.com/problems/find-peak-element/">Find Peak Element</a></h3>

<p>思路：二分法就是按照一定规律成倍缩小查找区间的方法，不一定是大小的要求。</p>

<p>这里面根据nums[i]和nums[i+1]的关系缩小区间（左右边界）</p>

:ET